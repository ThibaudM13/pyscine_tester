import inspect
import pytest
import sys
import warnings


# ---- UTILS ----
def docstrings(obj, firstCall: bool = True):
    if firstCall and inspect.isclass(obj):
        assert obj.__doc__ is not None, "Missing docstring"\
            f" for class {obj.__name__}"
        docstrings(obj, False)
    for name, member in inspect.getmembers(obj):
        if inspect.ismethod(member) or inspect.isfunction(member):
            is_required = not name.startswith('__') or name == '__init__'
            if is_required:
                assert member.__doc__ is not None, "Missing docstring"\
                    f" for {obj.__name__}.{name}"


def getStrError(e: Exception) -> str:
    """
    Method to get the error output required by the subject.
    """
    return f"{type(e).__name__}: {str(e)}"


def ft_warn(received: str, msg: str = None):
    b = '\033[1m'
    y = '\033[33m'
    r = '\033[m'
    warn_msg = ""
    warn_msg = f"\n{b}Not Same output as expected\n"\
               f"{r}{y}Received:{r}\n"\
               f"\t{received}\n"\
               f"{y}{msg}\n"
    if warn_msg:
        warnings.warn(y + warn_msg + r)


# -------------------
# -----   EX00  -----
# -------------------
from ex00.S1E9 import Character, Stark


def test_doc_ex00():
    docstrings(Character)
    docstrings(Stark)


def check_die(Class):
    dic = Class.__dict__
    if 'die' in dic.keys():
        dic = dic['die'].__dict__.keys()
        if '__isabstractmethod__' in dic:
            return True


tests_character = {
    'abstract die method': (check_die(Character),
                            True),
}


@pytest.mark.parametrize("value, expected",
                         tests_character.values(),
                         ids=tests_character.keys())
def test_ex00_Character(value: any, expected: any) -> bool:
    assert value == expected


no = Stark('NightOwl')
tests_stark = {
    'creation method': ("{'first_name': 'NightOwl', 'is_alive': True}",
                        str(no.__dict__)),
    'die method': ({'first_name': 'NightOwl', 'is_alive': False},
                   no.__dict__)
}
no.die()

@pytest.mark.parametrize("value, expected",
                         tests_stark.values(),
                         ids=tests_stark.keys())
def test_ex00_Stark(value: any, expected: any) -> bool:
    assert value == expected


# -------------------
# -----   EX01  -----
# -------------------
from ex01.S1E7 import Baratheon, Lannister


def test_doc_ex01():
    docstrings(Lannister)
    docstrings(Baratheon)


tests_baratheon = {
    'one_arg_init': (Baratheon('Babar').__dict__,
                     {'first_name': 'Babar', 'is_alive': True,
                      'family_name': 'Baratheon',
                      'eyes': 'brown', 'hairs': 'dark'}),
    'two_arg_init': (Baratheon('Barbare', False).__dict__,
                     {'first_name': 'Barbare', 'is_alive': False,
                      'family_name': 'Baratheon',
                      'eyes': 'brown', 'hairs': 'dark'}),
    'repr_method': (Baratheon('Barbara').__repr__(),
                    "Vector:('Baratheon','brown','dark')"),
    'str_method': (Baratheon('Barbara').__str__(),
                   "Vector:('Baratheon','brown','dark')"),
}


@pytest.mark.parametrize("value, expected",
                         tests_baratheon.values(),
                         ids=tests_baratheon.keys())
def test_ex01_Baratheon(value: any, expected: any) -> bool:
    if isinstance(expected, str):
        value = "".join(value.split())
    assert value == expected


tests_lannister = {
    'one_arg_init': (Lannister('Lanny').__dict__,
                     {'first_name': 'Lanny', 'is_alive': True,
                      'family_name': 'Lannister',
                      'eyes': 'blue', 'hairs': 'light'}),
    'two_arg_init': (Lannister('Lannelaure', False).__dict__,
                     {'first_name': 'Lannelaure', 'is_alive': False,
                      'family_name': 'Lannister',
                      'eyes': 'blue', 'hairs': 'light'}),
    'repr_method': (Lannister('Lanna').__repr__(),
                    "Vector:('Lannister','blue','light')"),
    'str_method': (Lannister('Lanna').__str__(),
                   "Vector:('Lannister','blue','light')"),
    'check create decorator': (type(Lannister.__dict__['create_lannister']),
                               classmethod)
}


@pytest.mark.parametrize("value, expected",
                         tests_lannister.values(),
                         ids=tests_lannister.keys())
def test_ex01_Lannister(value: any, expected: any) -> bool:
    if isinstance(expected, str):
        value = "".join(value.split())
    assert value == expected


# -------------------
# -----   EX02  -----
# -------------------
from ex02.DiamondTrap import King


def test_doc_ex02():
    docstrings(King)


bases = [b.__name__ for b in King.__bases__]
tests_king = {
    'Baratheon inherit': ('Baratheon' in bases,
                          True),
    'Lannister inherit': ('Lannister' in bases,
                          True),
}

king1 = King("Charles")
tests_king['one arg init'] = (king1.__dict__,
                              {'first_name': 'Charles',
                               'is_alive': True,
                               'family_name': 'Baratheon',
                               'eyes': 'brown', 'hairs': 'dark'})

king2 = King("Henri IV", False)
tests_king['two arg init'] = (king2.__dict__,
                              {'first_name': 'Henri IV',
                               'is_alive': False,
                               'family_name': 'Baratheon',
                               'eyes': 'brown', 'hairs': 'dark'})
king3 = King('Sunrise')
king4 = King('Happy')
king3.set_eyes('orange')
tests_king['eyes setter'] = (king3.eyes, 'orange')
king4.eyes = 'red'
tests_king['eyes getter'] = (king4.get_eyes(), 'red')

king3.set_hairs('void')
tests_king['hairs setter'] = (king3.hairs, 'void')
king4.hairs = 'raimbow'
tests_king['hairs getter'] = (king4.get_hairs(), 'raimbow')

@pytest.mark.parametrize("value, expected",
                         tests_king.values(),
                         ids=tests_king.keys())
def test_ex02_King(value, expected):
    assert value == expected


# -------------------
# -----   EX03  -----
# -------------------
from ex03.ft_calculator import calculator


def test_doc_ex03():
    docstrings(calculator)


# -------------------
# -----   EX04  -----
# -------------------
from ex04.ft_calculator import calculator as ccalculator


def test_doc_ex04():
    docstrings(ccalculator)

